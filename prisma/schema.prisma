// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  resetToken    String?
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  subscription  Subscription?
  blogPosts     BlogPost[]
  blocks        Block[]   // Blocks created by admin users
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Subscription and Payment models
model Subscription {
  id                String            @id @default(cuid())
  userId            String            @unique
  paddleCustomerId  String?           @unique
  paddleSubscriptionId String?        @unique
  status            SubscriptionStatus @default(INACTIVE)
  planId            String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// UI Blocks models
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  @default("#3B82F6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  blocks Block[]
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())

  blocks Block[]
}

model Block {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String?
  code        String    @db.Text
  preview     String?   @db.Text
  isPro       Boolean   @default(false)
  isPublished Boolean   @default(true)
  views       Int       @default(0)
  likes       Int       @default(0)
  categoryId  String
  authorId    String?   // Admin who created/modified the block
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author   User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  tags     Tag[]
}

// Blog models
model BlogPost {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String?
  content     String      @db.Text
  coverImage  String?
  isPublished Boolean     @default(false)
  publishedAt DateTime?
  views       Int         @default(0)
  readTime    Int?        // in minutes
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  author     User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories BlogCategory[]
  tags       BlogTag[]
}

model BlogCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())

  posts BlogPost[]
}

model BlogTag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())

  posts BlogPost[]
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
  TRIALING
}
